# -*- coding:utf-8 -*-
__author__ = 'px'

"""
二叉树: 未排序，线性查找
二叉搜索树: 树不平衡，在极端情况下，会退化成线性查找
平衡二叉树AVL: 
    1. 平衡树，左右子树高度差最多不超过1，有大量的旋转操作
    2. 用插入的成本来弥补查询的效率，一旦插入次数比查询大的情况下，AVL就不合适了
红黑树: 
    1. 平衡树，最长子树不超过最短子树的2倍即可，插入时减少了很多旋转操作
    2. 随着数据的插入，发现树的深度会变深，查找时间会变长
B树:
    有序的多路查询树.
    1. 树中每个结点至多有m个孩子结点（即至多有m-1个关键字），至少t个孩子，至多2t个孩子
    2. 每个结点的结构为：键值，指针，数据
        n p0 k1 p1 k2 ... kn pn
    3. 除根结点外，其他结点至少有m/2个孩子结点
    4. 若根结点不是叶子结点，则根结点至少有两个孩子结点
    5. 所有叶子结点都在同一层上，即B树是所有结点的平衡因子等于0的多路查找树
B+树
    非叶子结点只存记录和指针，叶子结点存数据
    可以存储更多的数据
"""